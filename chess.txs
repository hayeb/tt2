-- TorXakis Model for the Lichess Chess application.
-- Authors: Denisa _, Rick Erckens, Haye Bohm

-- ----------------------------------------------------------------------------------------- --
-- Data

TYPEDEF ChessStates ::= Nil | Cons  { hd ::  Int
                              ; tl ::  ChessStates
                              }
ENDDEF

-- add f to end of b
FUNCDEF addToEnd (b :: ChessStates; f :: ChessStates) :: ChessStates
    ::= IF isNil(f)
        THEN b
        ELSE
            IF isNil(b)
            THEN f
            ELSE Cons(hd(b), addToEnd(tl(b), f))
            FI
        FI
ENDDEF

-- add f to begin of b --
FUNCDEF addToBegin (b :: ChessStates; f:: ChessStates) :: ChessStates
    ::= addToEnd(f, b)
ENDDEF

FUNCDEF getLast(l :: ChessStates) :: Int
	::= IF isNil(tl(l))
		THEN hd(l)
		ELSE getLast(tl(l))
		FI
ENDDEF


FUNCDEF allButLast(b :: ChessStates) :: ChessStates ::=
	IF isNil(tl(b))
	THEN Nil
	ELSE Cons(hd(b), allButLast(tl(b)))
	FI
ENDDEF



TYPEDEF ChessCommand ::= ChessMove | ChessBack | ChessBackStep | ChessForward | ChessForwardStep | ChessFlip | ChessResign | ChessTakeBack
ENDDEF

-- ----------------------------------------------------------------------------------------- --
PROCDEF movePiece [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
	Command ! ChessMove >-> Response ? resp >-> chessLoop [Response, Command] (addToEnd(back, Cons(current, Nil)), Nil, resp)
ENDDEF

PROCDEF backward [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
    Command ! ChessBack >-> Response ? resp [[ resp == hd(back) ]] >-> chessLoop [Response, Command] ( Nil, tl(addToBegin(Cons(current, forward), back)), resp)
ENDDEF

PROCDEF backwardStep [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
     Command ! ChessBackStep >-> Response ? resp [[ resp == getLast(back) ]] >-> chessLoop [Response, Command] (allButLast(back), Cons(current, forward), resp)
ENDDEF

PROCDEF forward [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
     Command ! ChessForward >-> Response ? resp [[resp == getLast(forward)]] >-> chessLoop [Response, Command] (allButLast(addToEnd(addToEnd(back, Cons(current, Nil)), forward)), Nil, resp)
ENDDEF

PROCDEF forwardStep [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
    Command ! ChessForwardStep >-> Response ? resp [[resp == hd(forward)]] >-> chessLoop [Response, Command] (addToEnd(back, Cons(current, Nil)), tl(forward), resp)
ENDDEF

PROCDEF chessLoop [Response :: Int; Command :: ChessCommand] (back :: ChessStates; forward :: ChessStates; current :: Int)
::=
        [[isNil(back) /\ isNil(forward)]] =>> movePiece [Response, Command] (back, forward, current)
     ##
        [[isNil(back) /\ not(isNil(forward))]] =>> (
                forward [Response, Command] (back, forward, current)
            ##
                forwardStep [Response, Command] (back, forward, current)
        )
	 ##
		[[isNil(forward) /\ not(isNil(back))]] =>> (
				movePiece [Response, Command] (back, forward, current)
	        ##
	            backward [Response, Command] (back, forward, current)
	        ##
	            backwardStep [Response, Command] (back, forward, current)
	    )
     ##
        [[not(isNil(back)) /\ not(isNil(forward))]] =>> (
                backward [Response, Command] (back, forward, current)
            ##
                backwardStep [Response, Command] (back, forward, current)
            ##
                forward [Response, Command] (back, forward, current)
            ##
                forwardStep [Response, Command] (back, forward, current)
        )
ENDDEF

-- ----------------------------------------------------------------------------------------- --


CHANDEF Channels ::=
    Command :: ChessCommand ; Response :: Int
ENDDEF


MODELDEF LiChess ::=
    CHAN IN    Command
    CHAN OUT   Response

    BEHAVIOUR
		Response ? resp >-> chessLoop [Response, Command] (Nil, Nil, resp)
ENDDEF

-- ----------------------------------------------------------------------------------------- --

CNECTDEF  Sut ::=
        CLIENTSOCK

        CHAN OUT Command 					HOST "localhost" PORT 7890
		ENCODE Command ? cmd				-> ! toString (cmd)
		
		CHAN IN Response					HOST "localhost" PORT 7890
		DECODE 	Response ! fromString(s)	<- ? s
ENDDEF

-- ----------------------------------------------------------------------------------------- --
--                                                                                           --
-- ----------------------------------------------------------------------------------------- --
